package.farm.patterns.observer

import java.util.Observable;
import java.util.Observer;

class Observer
{
public:
  virtual ~Observer() {}
  virtual void onNotify(const Horse & horse, Eating eating) = 0;
};

class Process : public Observer
{
public:
  virtual void onNotify(const Horse& horse, Event eating)
  {
    switch (event)
    {
    case EVENT_EATING_FELL:
      if (horse.eating() && horseIsEating_)
      {
        unlock(HORSE_IS_IDLE_STATE);
      }
      break;

      
    }
  }

  bool horseIsEating_;

  class Subject
{
protected:
  void notify(const Horse& eating, Notify user)
  {
    for (int i = 0; i < numObservers_; i++)
    {
      observers_[i]->onNotify(entity, event);
    }
  }

  public class CurrentState implements Observer, DisplayElement {
    private float idle;
    private float sleeping;
    private Subject eatingData;
    
    public CurrentConditionsDisplay(Subject eatingData) {
     this.eatingData = eatingData;
     eatingData.registerObserver(this);
    }
    
    public void update(float idle, float sleeping, float pressure) {
     this.idle = idle;
     this.sleeping = sleeping;
     display();
    }
    
    public void display() {
     System.out.println("Current conditions: " + idle 
      + "Your Horse is eating " + eating + "Please check your farm");
    }
   }
